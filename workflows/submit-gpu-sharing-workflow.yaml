apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: gpu-allocation-
spec:
  ttlStrategy:
    secondsAfterCompletion: 3600
  serviceAccountName: argo-workflow
  entrypoint: main
  arguments:
    parameters:
    - name: secret
      value: argo-workflows-admin.service-account-token
    - name: argo-server-url
      value: http://argo-workflows-server.argo.svc.cluster.local:2746/api/v1/workflows
    - name: namespace
      value: default
    - name: gpus
      value: 1
    - name: workflow-name
      value: fantastic-tiger
    - name: args
      value: '["message=hello"]'
  templates:
    - name: main
      steps:
      - - name: gpu-allocation
          template: create-wf
    - name: create-wf
      podSpecPatch: '{"containers":[{"name":"main", "resources":{"limits":{"nvidia.com/gpu": "{{workflow.parameters.gpus}}" }}}]}'
      script:
        image: badouralix/curl-jq:latest
        command:
          - sh
        source: >
          echo "GPU_UUID: $NVIDIA_VISIBLE_DEVICES / NODE_NAME: $NODE_NAME";
          response=$(curl "{{workflow.parameters.argo-server-url}}/{{workflow.parameters.namespace}}/submit" \
            -fs \
            -w "%{http_code}" \
            -H "Authorization: Bearer $ARGO_TOKEN" \
            -d '{
              "resourceKind": "WorkflowTemplate",
              "resourceName": "{{workflow.parameters.workflow-name}}",
              "submitOptions": {
                "parameters": {{workflow.parameters.args}}
              }
            }'
          );
          status_code=${response: -3};
          if [[ $status_code -ne 200  ]] ; then
            echo "Workflow submission request failed: $status_code";
            exit 1
          fi;
          content=$(echo ${response} | head -c-4);
          workflow_uid=$(echo $content | jq -r '.metadata.name');
          echo "WORKFLOW_UID: $workflow_uid";

          echo "Watch $workflow_uid until it is finished";
          while true; do
            response=$(curl --silent -X GET "{{workflow.parameters.argo-server-url}}/{{workflow.parameters.namespace}}/$workflow_uid" \
              -w "%{http_code}" \
              -H "Authorization: Bearer $ARGO_TOKEN" \
              -H "Content-Type: application/json" \
            );
            status_code=${response: -3};
            if [[ $status_code -ne 200  ]] ; then
              echo "Workflow status check request failed: $status_code";
              exit 1
            fi;
            content=$(echo ${response} | head -c-4);
            status=$(echo $content | jq -r '.status.phase');
            echo "Current status: $status";

            if [ "$status" == "Succeeded" ] || [ "$status" == "Failed" ] || [ "$status" == "Error" ]; then
              break
            fi
            sleep 3
          done;
          echo "Workflow $WORKFLOW_UID completed with status: $status";
        env:
        - name: ARGO_TOKEN
          valueFrom:
            secretKeyRef:
              name: "{{workflow.parameters.secret}}"
              key: token
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
